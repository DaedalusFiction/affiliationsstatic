@page "/create-and-share"
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using System.Globalization

<PageTitle>Create and Share</PageTitle>


<div class="container container-md">
    <h1>Create and share games</h1>
    <br />
    <EditForm Model="@this" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="category-panel">
            <div class="category-header">
                <h3>Tips</h3>
            </div>
            <div class="category-input">
                <ul>
                    <li>
                        <p>Create one easy category, one tough category, and two somewhere in the middle.</p>
                    </li>
                    <li>
                        <p>Don't include clues that could definitely fit into multiple categories. Instead, try to
                            include clues that at first glance look like they <em>might</em> work in multiple
                            categories, but
                            really only fit into one. For example, if one category is "Ingredients in Chocolate Cake,"
                            another category might have "Baking Soda" in it. It looks like it should fit, but it
                            doesn't.</p>
                    </li>
                    <li>
                        <p>Limit categories to one of each "type". For example, one category can be rhyming words, one
                            can be synonyms, one can be things found somewhere, and one can can have a visual element,
                            like color.</p>
                    </li>
                    <li>
                        <p>When making something for a specific person, it's fine to have categories that anyone could
                            guess. They don't all have to be specific to that person.</p>
                    </li>
                </ul>
            </div>
        </div>
        <div class="category-panel">
            <div class="category-header">
                <h3>Affiliation One</h3>
            </div>
            <div class="category-input">
                <label for="CategoryOne">
                    <h5>Affiliation:</h5>
                </label>
                <div>
                    <input maxlength="30" type="text" id="CategoryOne" @bind="CategoryOne" @bind:event="oninput"
                        placeholder="e.g. Lunch Meats">
                    <p class="char-limit">@(CategoryOne.Length)/30</p>
                    <h5>Clues:</h5>
                    <ul>
                        @for (int i = 0; i < CluesOne.Count; i++)
                        {
                            var iCopy = i;
                            <p>
                                <label hidden for="@($"clue{i}")">@(i + 1)</label>
                                <input maxlength="20" type="text" id="@($"clue{i}")" value="@CluesOne[i]"
                                    @oninput="@(e => CluesOne[iCopy] = e?.Value?.ToString() ?? "")" placeholder="Clue" />
                            <p class="char-limit">@(CluesOne[i].Length)/20</p>
                            </p>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="category-panel">
            <div class="category-header">
                <h3>Affiliation Two</h3>
            </div>
            <div class="category-input">
                <label for="CategoryTwo">
                    <h5>Affiliation:</h5>
                </label>
                <div>
                    <input maxlength="30" type="text" id="CategoryTwo" @bind="CategoryTwo" @bind:event="oninput"
                        placeholder="e.g. Parts of a flower">
                    <p class="char-limit">@(CategoryTwo.Length)/30</p>
                    <h5>Clues:</h5>
                    <ul>
                        @for (int i = 0; i < CluesTwo.Count; i++)
                        {
                            var iCopy = i;
                            <p>
                                <label hidden for="@($"clue{i}")">@(i + 1)</label>
                                <input maxlength="20" type="text" id="@($"clue{i}")" value="@CluesTwo[i]"
                                    @oninput="@(e => CluesTwo[iCopy] = e?.Value?.ToString() ?? "")" placeholder="Clue" />
                            <p class="char-limit">@(CluesTwo[i].Length)/20</p>
                            </p>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="category-panel">
            <div class="category-header">
                <h3>Affiliation Three</h3>
            </div>
            <div class="category-input">
                <label for="CategoryThree">
                    <h5>Affiliation:</h5>
                </label>
                <div>
                    <input maxlength="30" type="text" id="CategoryThree" @bind="CategoryThree" @bind:event="oninput"
                        placeholder="e.g. ____ Friday">
                    <p class="char-limit">@(CategoryThree.Length)/30</p>
                    <h5>Clues:</h5>
                    <ul>
                        @for (int i = 0; i < CluesThree.Count; i++)
                        {
                            var iCopy = i;
                            <p>
                                <label hidden for="@($"clue{i}")">@(i + 1)</label>
                                <input maxlength="20" type="text" id="@($"clue{i}")" value="@CluesThree[i]"
                                    @oninput="@(e => CluesThree[iCopy] = e?.Value?.ToString() ?? "")" placeholder="Clue" />
                            <p class="char-limit">@(CluesThree[i].Length)/20</p>
                            </p>
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="category-panel">
            <div class="category-header">
                <h3>Affiliation Four</h3>
            </div>
            <div class="category-input">
                <label for="CategoryFour">
                    <h5>Affiliation:</h5>
                </label>
                <div>
                    <input maxlength="30" type="text" id="CategoryFour" @bind="CategoryFour" @bind:event="oninput"
                        placeholder="e.g. Things you find at a flea market">
                    <p class="char-limit">@(CategoryFour.Length)/30</p>
                    <h5>Clues:</h5>
                    <ul>
                        @for (int i = 0; i < CluesFour.Count; i++)
                        {
                            var iCopy = i;
                            <p>
                                <label hidden for="@($"clue{i}")">@(i + 1)</label>
                                <input maxlength="20" type="text" id="@($"clue{i}")" value="@CluesFour[i]"
                                    @oninput="@(e => CluesFour[iCopy] = e?.Value?.ToString() ?? "")" placeholder="Clue" />
                            <p class="char-limit">@(CluesOne[i].Length)/20</p>
                            </p>
                        }
                    </ul>
                </div>

            </div>
        </div>
        <div>
            <div class="category-panel">
                <div class="category-header">
                    <h3>General Info</h3>
                </div>
                <div class="category-input">

                    <label for="titleName">
                        <h5>Title</h5>
                    </label>
                    <div>
                        <label hidden for="titleName">Title</label>
                        <input maxlength="20" type="text" id="titleName" @bind-value="Title"
                            placeholder="E.G. Night on the Town" />
                    </div>
                    <label for="recipient">
                        <h5>Who is this for?</h5>
                    </label>
                    <div>
                        @* <input id="recipient" placeholder="e.g. Grandma, or Anyone" @bind="Recipient" type="text" />
                        *@
                        <select @bind="Recipient">
                            @foreach (string recipient in Recipients)
                            {
                                <option>@recipient</option>
                            }
                        </select>
                    </div>

                    <label for="creator">
                        <h5>Your Name (optional)</h5>
                    </label>
                    <div>
                        <label hidden for="creatorName">Name</label>
                        <input maxlength="20" type="text" id="creatorName" @bind-value="Creator"
                            placeholder="Your name" />
                    </div>
                </div>
            </div>
        </div>
        <div class="flex justify-center gap">
            <button class="btn" type="submit">Create Game</button>
        </div>




    </EditForm>
</div>


@code {
    private string? GameURL;
    public string[] Recipients = { "Anyone", "Joanie", "Grandma", "Aunt Joan", "Mary",
"Catherine", "Dave L.", "Jack", "Dave S.", "Steve", "Not Listed" };

    [Required]
    private string CategoryOne = "";
    private string? Title = "";
    [Required]
    private List<string> CluesOne = new List<string>() { "", "", "", "" };
    [Required]
    private string CategoryTwo = "";
    [Required]
    private List<string> CluesTwo = new List<string>() { "", "", "", "" };
    [Required]
    private string CategoryThree = "";
    [Required]
    private List<string> CluesThree = new List<string>() { "", "", "", "" };
    [Required]
    private string CategoryFour = "";
    [Required]
    private List<string> CluesFour = new List<string>() { "", "", "", "" };
    [Required]
    private string Recipient = "Anyone";
    private string? Creator = "";
    public void createGame()
    {

        Row firstRow = new Row(CategoryOne, CluesOne, "#067BC2");
        Row secondRow = new Row(CategoryTwo, CluesTwo, "#DF2935");
        Row thirdRow = new Row(CategoryThree, CluesThree, "#5F0A87");
        Row fourthRow = new Row(CategoryFour, CluesFour, "#3F220F");
        List<Row> rows = new List<Row> { firstRow, secondRow, thirdRow, fourthRow };
        Board solution = new Board(rows);
    }


    interface IBoard
    {
        void play(string name);
    }

    public class Board : IBoard
    {
        public List<Row> Rows { get; set; }

        public Board(List<Row> rows)
        {
            Rows = rows;
        }
        public void play(string name)
        {
            Console.WriteLine("Playing with: " + name);
        }
    }

    public class Row
    {

        public string Affiliation { get; set; }
        public string BackgroundColor { get; set; } = "#dbfe87";
        public bool Solved { get; set; } = false;
        public List<string> Clues { get; set; }
        public Row(string affiliation, List<string> clues, string backgroundColor)
        {
            Affiliation = affiliation;
            BackgroundColor = backgroundColor;
            Clues = clues;
        }
    }

    private bool ValidateForm()
    {
        bool isValid = true;
        if (string.IsNullOrWhiteSpace(CategoryOne))
        {
            isValid = false;
        }
        foreach (var clue in CluesOne)
        {
            if (string.IsNullOrWhiteSpace(clue))
            {
                isValid = false;
            }
        }

        return isValid;
    }

    public class GameData
    {
        public string? Recipient { get; set; }
        public string? Title { get; set; }
        public string? Creator { get; set; }
        public Board? Board { get; set; }

        public DateTime CreatedAt { get; set; }
    }

    private async void HandleSubmit()
    {
        Row firstRow = new Row(CategoryOne, CluesOne, "#067BC2");
        Row secondRow = new Row(CategoryTwo, CluesTwo, "#DF2935");
        Row thirdRow = new Row(CategoryThree, CluesThree, "#5F0A87");
        Row fourthRow = new Row(CategoryFour, CluesFour, "#3F220F");
        List<Row> rows = new List<Row> { firstRow, secondRow, thirdRow, fourthRow };
        Board GameBoard = new Board(rows);

        var data = new GameData
            {
                Recipient = Recipient,
                Board = GameBoard,
                CreatedAt = DateTime.Now,
                Creator = Creator,
                Title = Title
            };
        if (ValidateForm())
        {
            var docID = await JSRuntime.InvokeAsync<string>("addDataToFirestore", "games", data);
            GameURL = $"https://davidsorensen.dev/play/{docID}";
            CategoryOne = "";
            CategoryTwo = "";
            CategoryThree = "";
            CategoryFour = "";
            Recipient = "Anyone";
            CluesOne = new List<string>() { "", "", "", "" };
            CluesTwo = new List<string>() { "", "", "", "" };
            CluesThree = new List<string>() { "", "", "", "" };
            CluesFour = new List<string>() { "", "", "", "" };
            await InvokeAsync(StateHasChanged);
            NavigationManager.NavigateTo(GameURL);
        }
        else
        {
            Console.WriteLine("invalid");
        }
    }



}
