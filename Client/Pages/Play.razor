@page "/play/{Param?}"
@using System.Text.Json
@using System.Threading
@inject IJSRuntime JSRuntime

<PageTitle>Play Affiliations</PageTitle>

<div class="container container-sm">
    <div class="w-full">
        <h1 class="text-center">AFFILIATIONS</h1>
        <p class="text-center">This one's for: @(Recipient == "Not Listed" ? "Someone Special!" : Recipient)</p>
        <p class="text-center">Made by: @(Creator)</p>
        <div class="game-board">
            @foreach (Row row in solvedRows)
            {

                @if (row.Clues != null)
                {
                    <div class="solved-row" style="@($"background-color: {row.BackgroundColor};")">
                        <h4>@row.Affiliation</h4>
                        <p>@(String.Join(", ", row.Clues))</p>
                    </div>

                }
            }
            @if (gameBoard != null)
            {

                @foreach (string clue in gameBoard)
                {
                    <div class="@(selectedClues.Contains(clue) ? "game-tile-selected game-tile " + PlayErrorAnimation : "game-tile" )"
                        @onclick="() => handleClickClue(clue)">
                        <p>@clue</p>
                    </div>
                }
            }

        </div>
        <div>
            <p class="text-center">Mistakes Remaining: @(String.Concat(Enumerable.Repeat("â—† ", Math.Max(4 -
                Mistakes, 0))))
            </p>
        </div>
        <div class="flex justify-center gap">
            <button class="btn" disabled="@(selectedClues?.Count < 4)" @onclick="() => handleSolve()">Solve</button>
            <button class="btn" @onclick="handleRandomize">Shuffle</button>
            <button class="btn" @onclick="handleReset">Reset</button>
            @if (Mistakes > 3)
            {
                <button class="btn" @onclick="handleGiveUp">Give Up</button>

            }
        </div>
        <br />
        @if (OneAway)
        {
            <p class="text-center">One Away!</p>
        }
    </div>
</div>

@code {
    [Parameter]
    public string? Param { get; set; }
    public string PlayErrorAnimation { get; set; } = "";
    private bool OneAway { get; set; } = false;
    private int Mistakes { get; set; } = 0;
    private static Timer? _timer { get; set; }

    public static List<string> selectedClues = new List<string>() { };
    public static List<Row> solvedRows = new List<Row>() { };

    public Board? Solution { get; set; }
    public string? Recipient { get; set; } = "Anybody";
    public string? Creator { get; set; } = "Anonymous";
    public string[]? gameBoard = { };


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine(Param);
            string documentId;
            if (Param == null)
            {
                documentId = "kh3YIV1FCNuGlJ7z1ngm";

            }
            else
            {
                documentId = Param;
            }
            GameData gameData = await JSRuntime.InvokeAsync<GameData>("getDocumentFromFirestore", "games", documentId);

            // Deserialize the board data into a Board object
            Board solution = new Board();

            if (gameData?.board?.Rows != null)
            {
                // ... deserialize gameData.board.Rows ...
                solution.Rows = JsonSerializer.Deserialize<List<Row>>(JsonSerializer.Serialize(gameData.board.Rows));
                @* var name = gameData.Name; *@
                Recipient = gameData.Recipient;
                Creator = gameData.Creator;
            }
            else
            {
                // Handle the case when gameData, gameData.board, or gameData.board.Rows is null
                solution.Rows = new List<Row>(); // Or any other default value you want to assign
            }

            Solution = solution;

            handleReset();
            await InvokeAsync(StateHasChanged);
        }
    }




    private class GameData
    {
        public string? Id { get; set; }
        public string? Recipient { get; set; }
        public string? Creator { get; set; }

        public Board? board { get; set; }

    }

    public static string[] handleGenerateGameBoard(Board solution)
    {
        List<string> cluesList = new List<string>();

        if (solution.Rows != null)
        {

            foreach (Row row in solution.Rows)
            {
                if (row.Clues != null)
                {
                    cluesList.AddRange(row.Clues);
                }
            }
        }

        string[] clues = cluesList.ToArray();
        Random.Shared.Shuffle(clues);
        return clues;
    }

    public void handleClickClue(string clue)

    {
        PlayErrorAnimation = "";
        OneAway = false;
        if (selectedClues.Contains(clue))
        {
            selectedClues.Remove(clue);
        }
        else if (selectedClues.Count > 3)
        {
            return;
        }
        else
        {
            selectedClues.Add(clue);
        }
    }

    public void handleReset()
    {
        solvedRows = new List<Row>();
        Mistakes = 0;
        if (Solution != null && Solution.Rows != null)
        {
            foreach (Row row in Solution.Rows)
            {
                row.Solved = false;
            }
            gameBoard = handleGenerateGameBoard(Solution);
        }
    }
    public void handleGiveUp()
    {
        gameBoard = new string[] { };

        foreach (Row row in Solution?.Rows)
        {
            if (!solvedRows.Contains(row))
            {

                solvedRows.Add(row);
            }
        }
    }


    public void handleSolve()
    {
        bool success = false;
        Thread.Sleep(500);
        if (Solution != null && Solution.Rows != null)
        {
            foreach (Row row in Solution.Rows)
            {
                if (row.Clues != null)
                {

                    var result = selectedClues.Intersect(row.Clues);
                    if (result.Count() == 3)
                    {
                        PlayErrorAnimation = "error-animation";
                        OneAway = true;

                    }
                    else if (result.Count() == 4 && gameBoard != null)
                    {
                        solvedRows.Add(row);
                        string[] newBoard = gameBoard.Where(clue => !row.Clues.Contains(clue)).ToArray();
                        selectedClues = new List<string>();
                        gameBoard = newBoard;
                        success = true;
                        ((IJSRuntime)JSRuntime).InvokeVoidAsync("console.log", row.Affiliation);
                    }
                    else
                    {
                        PlayErrorAnimation = "error-animation";
                        Console.WriteLine("sdf");

                    }
                }
            }
        }
        if (!success) { Mistakes++; }
    }

    public void handleRandomize()
    {
        selectedClues = new List<string>();
        if (gameBoard != null)
        {
            Random.Shared.Shuffle(gameBoard);
        }
    }



    public class Board
    {
        public List<Row>? Rows { get; set; } = new List<Row> { new Row() };



    }

    public class Row
    {
        public string? Affiliation { get; set; }
        public List<string>? Clues { get; set; }
        public string BackgroundColor { get; set; } = "#dbfe87";
        public bool? Solved { get; set; } = false;

    }

    public void handleClick()
    {
        ((IJSRuntime)JSRuntime).InvokeVoidAsync("console.log", "hi");
    }
}