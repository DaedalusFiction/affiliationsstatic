@page "/browse/{Param?}"
@using System.Text.Json
@using System.Threading
@inject IJSRuntime JSRuntime
@using System.Globalization

<PageTitle>Browse Games</PageTitle>

<div class="container container-md">
    <div class="w-full">
        <h1 class="text-center">Games</h1>
        @if (Recipients != null)
        {
            foreach (string recipient in Recipients)
            {
                <div class="category-panel">
                    <div class="category-header">
                        <h3>For @recipient</h3>
                    </div>
                    @if (Documents != null)
                    {
                        <div class="category-input">
                            <ul>
                                @foreach (FirebaseDoc document in Documents.Documents)
                                {
                                    @if (document.Recipient == recipient)
                                    {
                                        <li><p>
                                            <a href="/play/@document.Id">@(document.Title != null ? document.Title : "Untitled")</a>, by
                                                    @(document.Creator != null ? document.Creator : "Anonymous")
                                        </p></li>
                                    }
                                }
                            </ul>
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public string? Param { get; set; }

    public List<string>? Recipients = new List<string>() { "Anyone", "Joanie", "Grandma", "Aunt Joan", "Mary",
"Catherine", "Dave L.", "Jack", "Dave S.", "Steve", "Not Listed" };
    public static FirebaseDocs? Documents { get; set; }
    private static Timer? _timer { get; set; }
    public static List<string> selectedClues = new List<string>() { };
    public static List<Row> solvedRows = new List<Row>() { };
    public Board? Solution { get; set; }
    public string? Recipient { get; set; } = "Anybody";
    public string[]? gameBoard = { };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            FirebaseDoc[] docsArray = await JSRuntime.InvokeAsync<FirebaseDoc[]>("getLatestDocumentsFromFirestore", "games");
            FirebaseDocs gameData = new FirebaseDocs(docsArray);
            Documents = gameData;
            // Find the document with the specified documentId


            await InvokeAsync(StateHasChanged);
        }
    }

    public class FirebaseDoc
    {
        public string Id { get; set; }
        public string? Title { get; set; }
        public string? CreatedAt { get; set; }
        public string? Recipient { get; set; }
        public string? Creator { get; set; }
        public Board Board { get; set; }
    }

    public string formatDate(string date)
    {
        string format = "yyyy-MM-ddTHH:mm:ss.fffzzz";
        try
        {

            DateTime dt = DateTime.ParseExact(date, format, System.Globalization.CultureInfo.InvariantCulture);

            // Now you can format the DateTime object as desired
            string formattedDate = dt.ToString("MM/dd/yyyy");
            Console.WriteLine(formattedDate);
            return formattedDate;
        }
        catch
        {
            return date;
        }
    }

    public class FirebaseDocs
    {
        public List<FirebaseDoc> Documents { get; set; }
        public FirebaseDocs(FirebaseDoc[] docs)
        {
            Documents = new List<FirebaseDoc>(docs);
        }
    }

    public class Board
    {
        public List<Row> Rows { get; set; }
    }

    public class Row
    {
        public string Affiliation { get; set; }
        public bool Solved { get; set; }
        public string BackgroundColor { get; set; }
        public List<string> Clues { get; set; }
    }

    public void handleClick()
    {
        ((IJSRuntime)JSRuntime).InvokeVoidAsync("console.log", "hi");
    }
}